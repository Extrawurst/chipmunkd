module chipmunk.chipmunk_private;

import chipmunk.chipmunk;
import chipmunk.chipmunk_types;
import chipmunk.chipmunk_structs;
import chipmunk.cpSpace;
import chipmunk.cpSpatialIndex;
import chipmunk.cpArbiter;
import chipmunk.cpShape;
import chipmunk.cpBody;

extern (C):

alias ubyte function (void*, void*) cpHashSetEqlFunc;
alias void* function (void*, void*) cpHashSetTransFunc;
alias void function (void*, void*) cpHashSetIteratorFunc;
alias ubyte function (void*, void*) cpHashSetFilterFunc;

extern __gshared cpCollisionHandler cpCollisionHandlerDoNothing;

cpArray* cpArrayNew (int size);
void cpArrayFree (cpArray* arr);
void cpArrayPush (cpArray* arr, void* object);
void* cpArrayPop (cpArray* arr);
void cpArrayDeleteObj (cpArray* arr, void* obj);
cpBool cpArrayContains (cpArray* arr, void* ptr);
void cpArrayFreeEach (cpArray* arr, void function(void*) freeFunc);
cpHashSet* cpHashSetNew (int size, cpHashSetEqlFunc eqlFunc);
void cpHashSetSetDefaultValue (cpHashSet* set, void* default_value);
void cpHashSetFree (cpHashSet* set);
int cpHashSetCount (cpHashSet* set);
void* cpHashSetInsert (cpHashSet* set, cpHashValue hash, void* ptr, cpHashSetTransFunc trans, void* data);
void* cpHashSetRemove (cpHashSet* set, cpHashValue hash, void* ptr);
void* cpHashSetFind (cpHashSet* set, cpHashValue hash, void* ptr);
void cpHashSetEach (cpHashSet* set, cpHashSetIteratorFunc func, void* data);
void cpHashSetFilter (cpHashSet* set, cpHashSetFilterFunc func, void* data);
void cpBodyAddShape (cpBody* body_, cpShape* shape);
void cpBodyRemoveShape (cpBody* body_, cpShape* shape);
void cpBodyAccumulateMassFromShapes (cpBody* body_);
void cpBodyRemoveConstraint (cpBody* body_, cpConstraint* constraint);
cpSpatialIndex* cpSpatialIndexInit (cpSpatialIndex* index, cpSpatialIndexClass* klass, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex* staticIndex);
cpArbiter* cpArbiterInit (cpArbiter* arb, cpShape* a, cpShape* b);
cpArbiterThread* cpArbiterThreadForBody (cpArbiter* arb, cpBody* body_);
void cpArbiterUnthread (cpArbiter* arb);
void cpArbiterUpdate (cpArbiter* arb, cpCollisionInfo* info, cpSpace* space);
void cpArbiterPreStep (cpArbiter* arb, cpFloat dt, cpFloat bias, cpFloat slop);
void cpArbiterApplyCachedImpulse (cpArbiter* arb, cpFloat dt_coef);
void cpArbiterApplyImpulse (cpArbiter* arb);
cpShape* cpShapeInit (cpShape* shape, const(cpShapeClass)* klass, cpBody* body_, cpShapeMassInfo massInfo);
cpBool cpShapeActive (cpShape* shape);
cpCollisionInfo cpCollide (const(cpShape)* a, const(cpShape)* b, cpCollisionID id, cpContact* contacts);
void CircleSegmentQuery (cpShape* shape, cpVect center, cpFloat r1, cpVect a, cpVect b, cpFloat r2, cpSegmentQueryInfo* info);
cpBool cpShapeFilterReject (cpShapeFilter a, cpShapeFilter b);
void cpLoopIndexes (const(cpVect)* verts, int count, int* start, int* end);
void cpConstraintInit (cpConstraint* constraint, const(cpConstraintClass)* klass, cpBody* a, cpBody* b);
void cpConstraintActivateBodies (cpConstraint* constraint);
cpVect relative_velocity (cpBody* a, cpBody* b, cpVect r1, cpVect r2);
cpFloat normal_relative_velocity (cpBody* a, cpBody* b, cpVect r1, cpVect r2, cpVect n);
void apply_impulse (cpBody* body_, cpVect j, cpVect r);
void apply_impulses (cpBody* a, cpBody* b, cpVect r1, cpVect r2, cpVect j);
void apply_bias_impulse (cpBody* body_, cpVect j, cpVect r);
void apply_bias_impulses (cpBody* a, cpBody* b, cpVect r1, cpVect r2, cpVect j);
cpFloat k_scalar_body (cpBody* body_, cpVect r, cpVect n);
cpFloat k_scalar (cpBody* a, cpBody* b, cpVect r1, cpVect r2, cpVect n);
cpMat2x2 k_tensor (cpBody* a, cpBody* b, cpVect r1, cpVect r2);
cpFloat bias_coef (cpFloat errorBias, cpFloat dt);
void cpSpaceSetStaticBody (cpSpace* space, cpBody* body_);
void cpSpaceProcessComponents (cpSpace* space, cpFloat dt);
void cpSpacePushFreshContactBuffer (cpSpace* space);
cpContact* cpContactBufferGetArray (cpSpace* space);
void cpSpacePushContacts (cpSpace* space, int count);
cpPostStepCallback* cpSpaceGetPostStepCallback (cpSpace* space, void* key);
cpBool cpSpaceArbiterSetFilter (cpArbiter* arb, cpSpace* space);
void cpSpaceFilterArbiters (cpSpace* space, cpBody* body_, cpShape* filter);
void cpSpaceActivateBody (cpSpace* space, cpBody* body_);
void cpSpaceLock (cpSpace* space);
void cpSpaceUnlock (cpSpace* space, cpBool runPostStep);
void cpSpaceUncacheArbiter (cpSpace* space, cpArbiter* arb);
cpArray* cpSpaceArrayForBodyType (cpSpace* space, cpBodyType type);
void cpShapeUpdateFunc (cpShape* shape, void* unused);
cpCollisionID cpSpaceCollideShapes (cpShape* a, cpShape* b, cpCollisionID id, cpSpace* space);
cpConstraint* cpConstraintNext (cpConstraint* node, cpBody* body_);
cpArbiter* cpArbiterNext (cpArbiter* node, cpBody* body_);
